// Generated by view binder compiler. Do not edit!
package com.example.titans_project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.titans_project.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityViewEventOrganizerBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button attendeesButton;

  @NonNull
  public final LinearLayout buttonContainer;

  @NonNull
  public final TextView dateHeader;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final Button editButton;

  @NonNull
  public final TextView eventDate;

  @NonNull
  public final TextView eventDetails;

  @NonNull
  public final TextView eventDetailsHeader;

  @NonNull
  public final ImageView eventImage;

  @NonNull
  public final TextView eventTitle;

  @NonNull
  public final TextView organizerInfo;

  @NonNull
  public final Button qrCodeButton;

  private ActivityViewEventOrganizerBinding(@NonNull RelativeLayout rootView,
      @NonNull Button attendeesButton, @NonNull LinearLayout buttonContainer,
      @NonNull TextView dateHeader, @NonNull Button deleteButton, @NonNull Button editButton,
      @NonNull TextView eventDate, @NonNull TextView eventDetails,
      @NonNull TextView eventDetailsHeader, @NonNull ImageView eventImage,
      @NonNull TextView eventTitle, @NonNull TextView organizerInfo, @NonNull Button qrCodeButton) {
    this.rootView = rootView;
    this.attendeesButton = attendeesButton;
    this.buttonContainer = buttonContainer;
    this.dateHeader = dateHeader;
    this.deleteButton = deleteButton;
    this.editButton = editButton;
    this.eventDate = eventDate;
    this.eventDetails = eventDetails;
    this.eventDetailsHeader = eventDetailsHeader;
    this.eventImage = eventImage;
    this.eventTitle = eventTitle;
    this.organizerInfo = organizerInfo;
    this.qrCodeButton = qrCodeButton;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityViewEventOrganizerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityViewEventOrganizerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_view_event_organizer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityViewEventOrganizerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.attendeesButton;
      Button attendeesButton = ViewBindings.findChildViewById(rootView, id);
      if (attendeesButton == null) {
        break missingId;
      }

      id = R.id.buttonContainer;
      LinearLayout buttonContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonContainer == null) {
        break missingId;
      }

      id = R.id.dateHeader;
      TextView dateHeader = ViewBindings.findChildViewById(rootView, id);
      if (dateHeader == null) {
        break missingId;
      }

      id = R.id.deleteButton;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.editButton;
      Button editButton = ViewBindings.findChildViewById(rootView, id);
      if (editButton == null) {
        break missingId;
      }

      id = R.id.eventDate;
      TextView eventDate = ViewBindings.findChildViewById(rootView, id);
      if (eventDate == null) {
        break missingId;
      }

      id = R.id.eventDetails;
      TextView eventDetails = ViewBindings.findChildViewById(rootView, id);
      if (eventDetails == null) {
        break missingId;
      }

      id = R.id.eventDetailsHeader;
      TextView eventDetailsHeader = ViewBindings.findChildViewById(rootView, id);
      if (eventDetailsHeader == null) {
        break missingId;
      }

      id = R.id.eventImage;
      ImageView eventImage = ViewBindings.findChildViewById(rootView, id);
      if (eventImage == null) {
        break missingId;
      }

      id = R.id.eventTitle;
      TextView eventTitle = ViewBindings.findChildViewById(rootView, id);
      if (eventTitle == null) {
        break missingId;
      }

      id = R.id.organizerInfo;
      TextView organizerInfo = ViewBindings.findChildViewById(rootView, id);
      if (organizerInfo == null) {
        break missingId;
      }

      id = R.id.qrCodeButton;
      Button qrCodeButton = ViewBindings.findChildViewById(rootView, id);
      if (qrCodeButton == null) {
        break missingId;
      }

      return new ActivityViewEventOrganizerBinding((RelativeLayout) rootView, attendeesButton,
          buttonContainer, dateHeader, deleteButton, editButton, eventDate, eventDetails,
          eventDetailsHeader, eventImage, eventTitle, organizerInfo, qrCodeButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
